
-- Customers table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    phone TEXT NOT NULL,
    city TEXT,
    created_at TIMESTAMPTZ DEFAULT now()
);
 
-- Products table
CREATE TABLE IF NOT EXISTS products (
    prod_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    sku TEXT UNIQUE NOT NULL,
    price NUMERIC(10,2) NOT NULL CHECK (price > 0),
    stock INT NOT NULL DEFAULT 0,
    category TEXT,
    created_at TIMESTAMPTZ DEFAULT now()
);
 
-- Orders table
CREATE TABLE IF NOT EXISTS orders (
    order_id SERIAL PRIMARY KEY,
    cust_id INT REFERENCES customers(cust_id) ON DELETE CASCADE,
    order_date TIMESTAMPTZ DEFAULT now(),
    status TEXT DEFAULT 'PLACED',
    total_amount NUMERIC(12,2)
);
 
-- Order Items table
CREATE TABLE IF NOT EXISTS order_items (
    item_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
    prod_id INT REFERENCES products(prod_id),
    quantity INT NOT NULL CHECK (quantity > 0),
    price NUMERIC(10,2) NOT NULL
);
 
-- Payments table
CREATE TABLE IF NOT EXISTS payments (
    payment_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
    amount NUMERIC(12,2),
    method TEXT,
    paid_at TIMESTAMPTZ,
    status TEXT
);
 
 
python -m src.cli.main product add --name "Mouse" --sku "M-001" --price 599 --stock 20 --category "Accessories"
 
create table public.orders (
  order_id serial not null,
  cust_id integer null,
  order_date timestamp with time zone null default now(),
  status text null default 'PLACED'::text,
  total_amount numeric(12, 2) null,
  constraint orders_pkey primary key (order_id),
  constraint orders_cust_id_fkey foreign KEY (cust_id) references customers (cust_id) on delete CASCADE
) TABLESPACE pg_default;
 
Customers Module
Scenario:

The store now wants to manage customer information. Each customer can place multiple orders. You must build features to handle Customer Management.
Tasks:
Create a new customer with details → name, email, phone, city.
Validate that email must be unique.
If email already exists, show an error.
Update a customer’s phone or city.
Delete a customer:
Allow deletion only if the customer has no orders.
If orders exist, block deletion with an error message.
List all customers.
Search customer by email or city.
 
To check Product List:
python -m src.cli.main product list
 
Add a customer:
python -m src.cli.main customer add --name "Rahul" --email "rahul@example.com" --phone "9999999999" --city "Hyderabad"
 
Orders Module
Scenario:

A customer comes to buy products. The system must create an order, assign products to it, calculate total amount, and manage stock.
Tasks:
Create a new order for a customer.
Input: customer_id and a list of products with quantities (e.g., [{prod_id: 1, qty: 2}, {prod_id: 3, qty: 1}]).
Check that the customer exists.
Check each product’s stock → if not enough stock, reject order with error.
Deduct stock for purchased products.
Insert order into orders table and order_items table.
Save the total_amount.
Fetch full details of an order (order info + customer info + order items).
List all orders of a customer.
Cancel an order:
Allowed only if status = PLACED.
Restore product stock.
Update order status = CANCELLED.
Mark an order as Completed after payment is successful
 
Payments Module:
Scenario:

The store now wants to track payments for each order.
Tasks:
When an order is created, insert a pending payment record with the total amount.
Process payment → mark payment as PAID with method (Cash/Card/UPI).
Update the order status to COMPLETED.
Support refunds: If an order is cancelled, mark the payment as REFUNDED.
Reporting Module 
Scenario:

The manager wants to see sales reports.
Tasks:
Show top 5 selling products (by total quantity).
Show total revenue in the last month.
Show total orders placed by each customer.
Show customers who placed more than 2 orders.
 